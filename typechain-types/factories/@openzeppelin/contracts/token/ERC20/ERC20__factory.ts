/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  ERC20,
  ERC20Interface,
} from "../../../../../@openzeppelin/contracts/token/ERC20/ERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000e3738038062000e3783398101604081905262000034916200024b565b81516200004990600390602085019062000068565b5080516200005f90600490602084019062000068565b5050506200030e565b8280546200007690620002dd565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681016001600160401b03811182821017156200014c576200014c6200010e565b6040525050565b60006200015f60405190565b90506200016d828262000124565b919050565b60006001600160401b038211156200018e576200018e6200010e565b601f19601f83011660200192915050565b60005b83811015620001bc578181015183820152602001620001a2565b83811115620001cc576000848401525b50505050565b6000620001e9620001e38462000172565b62000153565b905082815260208101848484011115620002065762000206600080fd5b620002138482856200019f565b509392505050565b600082601f830112620002315762000231600080fd5b815162000243848260208601620001d2565b949350505050565b60008060408385031215620002635762000263600080fd5b82516001600160401b038111156200027e576200027e600080fd5b6200028c858286016200021b565b602085015190935090506001600160401b03811115620002af57620002af600080fd5b620002bd858286016200021b565b9150509250929050565b634e487b7160e01b600052602260045260246000fd5b600281046001821680620002f257607f821691505b60208210811415620003085762000308620002c7565b50919050565b610b19806200031e6000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80633950935111610081578063a457c2d71161005b578063a457c2d714610183578063a9059cbb14610196578063dd62ed3e146101a957600080fd5b8063395093511461013f57806370a082311461015257806395d89b411461017b57600080fd5b806318160ddd116100b257806318160ddd1461010c57806323b872dd1461011d578063313ce5671461013057600080fd5b806306fdde03146100ce578063095ea7b3146100ec575b600080fd5b6100d66101e2565b6040516100e3919061060b565b60405180910390f35b6100ff6100fa366004610667565b610274565b6040516100e391906106ae565b6002545b6040516100e391906106c2565b6100ff61012b3660046106d0565b61028e565b60126040516100e39190610729565b6100ff61014d366004610667565b6102b2565b610110610160366004610737565b6001600160a01b031660009081526020819052604090205490565b6100d66102f1565b6100ff610191366004610667565b610300565b6100ff6101a4366004610667565b61035d565b6101106101b7366004610760565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101f1906107c2565b80601f016020809104026020016040519081016040528092919081815260200182805461021d906107c2565b801561026a5780601f1061023f5761010080835404028352916020019161026a565b820191906000526020600020905b81548152906001019060200180831161024d57829003601f168201915b5050505050905090565b60003361028281858561036b565b60019150505b92915050565b60003361029c85828561041f565b6102a785858561049f565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061028290829086906102ec90879061081e565b61036b565b6060600480546101f1906107c2565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156103505760405162461bcd60e51b815260040161034790610890565b60405180910390fd5b6102a7828686840361036b565b60003361028281858561049f565b6001600160a01b0383166103915760405162461bcd60e51b8152600401610347906108f8565b6001600160a01b0382166103b75760405162461bcd60e51b815260040161034790610960565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906104129085906106c2565b60405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610499578181101561048c5760405162461bcd60e51b815260040161034790610970565b610499848484840361036b565b50505050565b6001600160a01b0383166104c55760405162461bcd60e51b815260040161034790610a03565b6001600160a01b0382166104eb5760405162461bcd60e51b815260040161034790610a6b565b6001600160a01b038316600090815260208190526040902054818110156105245760405162461bcd60e51b815260040161034790610ad3565b6001600160a01b0380851660008181526020819052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906105829086906106c2565b60405180910390a3610499565b60005b838110156105aa578181015183820152602001610592565b838111156104995750506000910152565b60006105c5825190565b8084526020840193506105dc81856020860161058f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920192915050565b6020808252810161061c81846105bb565b9392505050565b60006001600160a01b038216610288565b61063d81610623565b811461064857600080fd5b50565b803561028881610634565b8061063d565b803561028881610656565b6000806040838503121561067d5761067d600080fd5b6000610689858561064b565b925050602061069a8582860161065c565b9150509250929050565b8015155b82525050565b6020810161028882846106a4565b806106a8565b6020810161028882846106bc565b6000806000606084860312156106e8576106e8600080fd5b60006106f4868661064b565b93505060206107058682870161064b565b92505060406107168682870161065c565b9150509250925092565b60ff81166106a8565b602081016102888284610720565b60006020828403121561074c5761074c600080fd5b6000610758848461064b565b949350505050565b6000806040838503121561077657610776600080fd5b6000610782858561064b565b925050602061069a8582860161064b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6002810460018216806107d657607f821691505b602082108114156107e9576107e9610793565b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115610831576108316107ef565b500190565b60258152602081017f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7781527f207a65726f000000000000000000000000000000000000000000000000000000602082015290505b60400190565b6020808252810161028881610836565b60248152602081017f45524332303a20617070726f76652066726f6d20746865207a65726f2061646481527f72657373000000000000000000000000000000000000000000000000000000006020820152905061088a565b60208082528101610288816108a0565b60228152602081017f45524332303a20617070726f766520746f20746865207a65726f20616464726581527f73730000000000000000000000000000000000000000000000000000000000006020820152905061088a565b6020808252810161028881610908565b6020808252810161028881601d81527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000602082015260400190565b60258152602081017f45524332303a207472616e736665722066726f6d20746865207a65726f20616481527f64726573730000000000000000000000000000000000000000000000000000006020820152905061088a565b60208082528101610288816109ab565b60238152602081017f45524332303a207472616e7366657220746f20746865207a65726f206164647281527f65737300000000000000000000000000000000000000000000000000000000006020820152905061088a565b6020808252810161028881610a13565b60268152602081017f45524332303a207472616e7366657220616d6f756e742065786365656473206281527f616c616e636500000000000000000000000000000000000000000000000000006020820152905061088a565b6020808252810161028881610a7b56fea26469706673582212204464fbf08e7ac30c9c294827e5388c0fcc5420cb2527c87c1f4e1a4c1a7eafb364736f6c634300080c0033";

type ERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20__factory extends ContractFactory {
  constructor(...args: ERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC20> {
    return super.deploy(name_, symbol_, overrides || {}) as Promise<ERC20>;
  }
  override getDeployTransaction(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name_, symbol_, overrides || {});
  }
  override attach(address: string): ERC20 {
    return super.attach(address) as ERC20;
  }
  override connect(signer: Signer): ERC20__factory {
    return super.connect(signer) as ERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20Interface {
    return new utils.Interface(_abi) as ERC20Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): ERC20 {
    return new Contract(address, _abi, signerOrProvider) as ERC20;
  }
}
